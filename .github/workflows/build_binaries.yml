name: Build binaries

on:
  push:
  pull_request:
  release:
    types: [published]

permissions:
  contents: write
  packages: write
   
jobs:
  validate_metadata:
    runs-on: ubuntu-latest
    outputs:
      shortname: ${{ steps.validate_model_metadata.outputs.model_short_name }}
      binary: ${{ steps.validate_model_metadata.outputs.model_binary }}
      version: ${{ steps.validate_model_metadata.outputs.model_version }}
      
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install PyYAML
        
    - name: Validate model's metadata
      id: validate_model_metadata
      run: |
        python .github/workflows/validate_model_metadata.py
    
    - name: Upload model's metadata
      uses: actions/upload-artifact@v4
      with:
        name: metadata
        path: |
          model.yml
          README.md
  
  ubuntu:
    
    runs-on: ubuntu-22.04
    needs: validate_metadata
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Build model
      run: |
        make static STATIC_OPENMP=/usr/lib/gcc/x86_64-linux-gnu/12/libgomp.a
      
    - name: Checking binary for model
      run: |
        ldd ${{ needs.validate_metadata.outputs.binary }}
            
    - name: Build model archive
      run: |
        rm -fr config/PhysiCell_settings-backup.xml
        tar -zcvf ${{ needs.validate_metadata.outputs.shortname }}-linux.tar.gz ${{ needs.validate_metadata.outputs.binary }} Makefile main.cpp config/ custom_modules/ model.yml

    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: ${{ needs.validate_metadata.outputs.shortname }}-linux.tar.gz
        asset_path: ${{ github.workspace }}/${{ needs.validate_metadata.outputs.shortname }}-linux.tar.gz
        asset_content_type: application/gzip

        
  windows:
    runs-on: windows-2022
    needs: validate_metadata

    defaults:
      run:
        shell: msys2 {0}
        
    steps:
    - uses: actions/checkout@v4
    
    - uses: msys2/setup-msys2@v2
      id: setup-msys2
      with:
        update: true
        install: mingw-w64-x86_64-binutils mingw-w64-x86_64-gcc mingw-w64-x86_64-headers-git mingw-w64-x86_64-gcc-libs mingw-w64-x86_64-libwinpthread-git mingw-w64-x86_64-lapack mingw-w64-x86_64-openblas mingw-w64-x86_64-libxml2 mingw-w64-x86_64-bzip2 mingw-w64-x86_64-python mingw-w64-x86_64-python-yaml mingw-w64-x86_64-python-zstandard mingw-w64-x86_64-python-cffi make bison flex mingw-w64-x86_64-ca-certificates

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Build model
      run: |
        python beta/setup_windows_dep.py
        make static
        
    - name: Checking binary for model
      run: |
        ldd .\\${{ needs.validate_metadata.outputs.binary }}.exe
      
    - name: Build model archive
      run: |
        rm -fr config/PhysiCell_settings-backup.xml
        tar -zcvf ${{ needs.validate_metadata.outputs.shortname }}-win.tar.gz ${{ needs.validate_metadata.outputs.binary }}.exe *.dll Makefile main.cpp config/ custom_modules/ model.yml
        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: ${{ needs.validate_metadata.outputs.shortname }}-win.tar.gz
        asset_path: ${{ github.workspace }}\${{ needs.validate_metadata.outputs.shortname }}-win.tar.gz
        asset_content_type: application/gzip
        
  
  macos_step0a:

    runs-on: macos-13
    needs: validate_metadata
    
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run : |
        if ! brew list gcc@14 &>/dev/null; then
          brew install gcc@14
        else
          echo "gcc@14 is already installed."
        fi
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Build model
      run: |
        export MACOSX_DEPLOYMENT_TARGET=13
        make PHYSICELL_CPP=g++-14 static
        cp ${{ needs.validate_metadata.outputs.binary }} ${{ needs.validate_metadata.outputs.binary }}_macos13

    - name: Caching produced project binary 
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/${{ needs.validate_metadata.outputs.binary }}_macos13
        key: ${{ runner.os }}-macos13-${{ github.run_id }}
    
    - name: Look at the generated binary
      run: |
        otool -L ${{ needs.validate_metadata.outputs.binary }}
        otool -l ${{ needs.validate_metadata.outputs.binary }}
        lipo -archs ${{ needs.validate_metadata.outputs.binary }}
    
  macos_step0b:
    
    runs-on: macos-14
    needs: validate_metadata
    
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run : |
        if ! brew list gcc@14 &>/dev/null; then
          brew install gcc@14
        else
          echo "gcc@14 is already installed."
        fi
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
     
    - name: Build model
      run: |
        export MACOSX_DEPLOYMENT_TARGET=14
        make PHYSICELL_CPP=g++-14 static
        cp ${{ needs.validate_metadata.outputs.binary }} ${{ needs.validate_metadata.outputs.binary }}_macosm1
   
    - name: Caching produced project binary 
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/${{ needs.validate_metadata.outputs.binary }}_macosm1
        key: ${{ runner.os }}-macosm1-${{ github.run_id }}
      
    - name: Look at the generated binary
      run: |
        otool -L ${{ needs.validate_metadata.outputs.binary }}
        otool -l ${{ needs.validate_metadata.outputs.binary }}
        lipo -archs ${{ needs.validate_metadata.outputs.binary }} 
        
  macos_step1:
    
    runs-on: macos-13
    needs: [macos_step0a, macos_step0b, validate_metadata]
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Caching produced project binary 
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/${{ needs.validate_metadata.outputs.binary }}_macosm1
        key: ${{ runner.os }}-macosm1-${{ github.run_id }}
    
    - name: Caching produced project binary 
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/${{ needs.validate_metadata.outputs.binary }}_macos13
        key: ${{ runner.os }}-macos13-${{ github.run_id }}
    
    - name: Creating universal binary
      run: | 
        lipo -create -output ${{ needs.validate_metadata.outputs.binary }} ${{ needs.validate_metadata.outputs.binary }}_macos13 ${{ needs.validate_metadata.outputs.binary }}_macosm1

    - name: Checking universal binary
      run: |
        lipo -archs ${{ needs.validate_metadata.outputs.binary }}
        otool -l ${{ needs.validate_metadata.outputs.binary }}
        otool -L ${{ needs.validate_metadata.outputs.binary }}
        
    - name: Build project archive
      run: |
        rm -fr config/PhysiCell_settings-backup.xml
        tar -zcvf ${{ needs.validate_metadata.outputs.shortname }}-macos.tar.gz ${{ needs.validate_metadata.outputs.binary }} Makefile main.cpp config/ custom_modules/ model.yml
        
    - uses: actions/upload-release-asset@v1
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: ${{ needs.validate_metadata.outputs.shortname }}-macos.tar.gz
        asset_path: ${{ github.workspace }}/${{ needs.validate_metadata.outputs.shortname }}-macos.tar.gz
        asset_content_type: application/gzip
